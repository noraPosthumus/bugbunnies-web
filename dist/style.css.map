{"version":3,"sourceRoot":"","sources":["_sass/packages/komplett/themed.scss","_sass/components/_flex-container.scss","_sass/components/_card.scss"],"names":[],"mappings":"AAiFI,0BA9BF,+HCnDF,gBACI,aACA,4BACI,mBCDR,MACI","sourcesContent":["@use 'sass:map';\r\n@use 'sass:meta';\r\n@use 'sass:list';\r\n\r\n// An empty map that will be filled with the given themes, once the `@themes` mixin was called\r\n$themes-map: ();\r\n// List of all keys in the themes to check which keys exist.\r\n$theme-keys: ();\r\n// The string used to prefix all CSS variables\r\n$prefix: 'themed';\r\n\r\n@function verify-themes($themes) {\r\n  @if not meta.type-of($themes-map) == 'map' {\r\n    @error \"The given themes variable is not a valid SCSS map.\";\r\n    @return false;\r\n  }\r\n\r\n  @if list.length(map.keys($themes)) == 0 {\r\n    @error \"The map of themes is empty.\";\r\n    @return false;\r\n  }\r\n\r\n  $primary-theme-name: list.nth(map.keys($themes), 1);\r\n  $primary-theme: map.get($themes, $primary-theme-name);\r\n\r\n  // Get all theme keys from the first theme as reference\r\n  $reference-keys: map.keys($primary-theme);\r\n\r\n  // Check each theme against the reference keys\r\n  @each $theme-name, $theme-entry in $themes {\r\n    // Check if the current theme has all reference keys\r\n    @each $key in $reference-keys {\r\n      @if not map.has-key($theme-entry, $key) {\r\n        @error \"Theme '#{$theme-name}' is missing the key '#{$key}'\";\r\n        @return false;\r\n      }\r\n    }\r\n\r\n    // Check if the current theme has any extra keys not in the reference\r\n    @each $key in map.keys($theme-entry) {\r\n      @if not list.index($reference-keys, $key) {\r\n        @error \"Theme '#{$theme-name}' has an extra key '#{$key}' not present in other themes\";\r\n        @return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n@mixin make-css-variable($prefix, $key, $value) {\r\n  --#{$prefix}-#{$key}: #{$value};\r\n}\r\n\r\n/**\r\n* Given a map of themes, checks all maps to be valid, have equal keys etc,\r\n* Then, saves the themes to global variables to do compile-time checks later and\r\n* creates CSS variables for each theme.\r\n*\r\n* the `$prefix` is used for the CSS variable, for example\r\n*/\r\n@mixin register($themes, $prefix: 'themed') {\r\n  @if not verify-themes($themes) {\r\n    @error \"Unable to check themes, see error above.\";\r\n  }\r\n\r\n  // Populate the global themes variable. This is later used just for validation etc.\r\n  $themes-map: $themes !global;\r\n  // Register valid keys. We checked that all maps have the same keys, so we just get the ones from the first theme.\r\n  $theme-keys: map.keys(list.nth(map.values($themes-map), 1)) !global;\r\n  // Prefix used for CSS variables\r\n  $prefix: $prefix !global;\r\n}\r\n\r\n/**\r\n* Verifies themes and then applies them to the documentElement.\r\n*/\r\n@mixin apply($themes, $prefix: 'themed') {\r\n  @include register($themes, $prefix);\r\n\r\n  @each $theme-name, $theme-map in $themes {\r\n    html[data-theme='#{$theme-name}'] {\r\n      // Register the default variables for each theme\r\n      @each $key, $val in $theme-map {\r\n        @include make-css-variable($prefix, $key, $val);\r\n\r\n        @content ($prefix, $key, $val, $theme-name);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n* Returns a value from the current theme, checking for validity\r\n* You could also just use the `var()` directly, but this function\r\n* provides a nice way to check for validity and shows a better error message\r\n*/\r\n@function themed($name, $verify: true) {\r\n  @if list.length($themes-map) == 0 {\r\n    @error \"There are no themes registered. You probably forgot to call 'register' or 'apply'\";\r\n  }\r\n\r\n  @if meta.type-of($name) != 'string' {\r\n    @error \"'#{$name}' is not a string (should be quoted when passed into this function)\";\r\n  } @else if $verify and list.index($theme-keys, $name) == null {\r\n    @error \"'#{$name}' is not defined in your themes.\";\r\n  }\r\n\r\n  @return var(--#{$prefix}-#{$name});\r\n}\r\n\r\n/*\r\n* Return a themes variable without any type-checking or using CSS variables,\r\n* Useful for custom theming logic on a component level\r\n*/\r\n@function unthemed($name, $theme: null, $verify: true) {\r\n  @if list.length($themes-map) == 0 {\r\n    @error \"There are no themes registered. You probably forgot to call 'register' or 'apply'\";\r\n  }\r\n\r\n  @if meta.type-of($name) != 'string' {\r\n    @error \"'#{$name}' is not a string (should be quoted when passed into this function)\";\r\n  } @else if $verify and list.index($theme-keys, $name) == null {\r\n    @error \"'#{$name}' is not defined in your themes.\";\r\n  }\r\n\r\n  @if $theme {\r\n    $themes-entry: map.get($themes-map, $theme);\r\n    @return map.get($themes-entry, $name);\r\n  }\r\n\r\n  $primary-theme-name: list.nth(map.keys($themes-map), 1);\r\n  $primary-theme: map.get($themes-map, $primary-theme-name);\r\n\r\n  @return map.get($primary-theme, $name);\r\n}\r\n\r\n// ------------\r\n// Helper methods/mixins\r\n// ------------\r\n\r\n/**\r\n* A function that applies the given transformer function to each value of all themes.\r\n* This can be used to dynamically alter themes, adding more variables to them.\r\n*/\r\n@function modify-themes($themes, $transformers...) {\r\n  $result-map: $themes;\r\n\r\n  @each $theme-name, $theme-map in $themes {\r\n    $theme-result: $theme-map;\r\n\r\n    @each $transformer in $transformers {\r\n      $transformer-result: $theme-result;\r\n\r\n      @each $key, $value in $theme-map {\r\n        $result: meta.call($transformer, $key, $value, $theme-name, $themes);\r\n        $transformer-result: map.merge($transformer-result, $result);\r\n      }\r\n\r\n      $theme-result: map.merge($theme-result, $transformer-result);\r\n    }\r\n\r\n    $result-map: map.deep-merge($result-map, (#{$theme-name}: $theme-result));\r\n  }\r\n\r\n  @return $result-map;\r\n}\r\n",".flex-container {\n    display: flex;\n    &--horizontal {\n        flex-direction: row;\n    }\n}","@use 'themes' as themes;\n\n.card {\n    background-color: themes.themed('background');\n}\n"],"file":"style.css"}