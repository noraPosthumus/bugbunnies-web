@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';

// An empty map that will be filled with the given themes, once the `@themes` mixin was called
$themes-map: ();
// List of all keys in the themes to check which keys exist.
$theme-keys: ();
// The string used to prefix all CSS variables
$prefix: 'themed';

@function verify-themes($themes) {
  @if not meta.type-of($themes-map) == 'map' {
    @error "The given themes variable is not a valid SCSS map.";
    @return false;
  }

  @if list.length(map.keys($themes)) == 0 {
    @error "The map of themes is empty.";
    @return false;
  }

  $primary-theme-name: list.nth(map.keys($themes), 1);
  $primary-theme: map.get($themes, $primary-theme-name);

  // Get all theme keys from the first theme as reference
  $reference-keys: map.keys($primary-theme);

  // Check each theme against the reference keys
  @each $theme-name, $theme-entry in $themes {
    // Check if the current theme has all reference keys
    @each $key in $reference-keys {
      @if not map.has-key($theme-entry, $key) {
        @error "Theme '#{$theme-name}' is missing the key '#{$key}'";
        @return false;
      }
    }

    // Check if the current theme has any extra keys not in the reference
    @each $key in map.keys($theme-entry) {
      @if not list.index($reference-keys, $key) {
        @error "Theme '#{$theme-name}' has an extra key '#{$key}' not present in other themes";
        @return false;
      }
    }
  }

  @return true;
}

@mixin make-css-variable($prefix, $key, $value) {
  --#{$prefix}-#{$key}: #{$value};
}

/**
* Given a map of themes, checks all maps to be valid, have equal keys etc,
* Then, saves the themes to global variables to do compile-time checks later and
* creates CSS variables for each theme.
*
* the `$prefix` is used for the CSS variable, for example
*/
@mixin register($themes, $prefix: 'themed') {
  @if not verify-themes($themes) {
    @error "Unable to check themes, see error above.";
  }

  // Populate the global themes variable. This is later used just for validation etc.
  $themes-map: $themes !global;
  // Register valid keys. We checked that all maps have the same keys, so we just get the ones from the first theme.
  $theme-keys: map.keys(list.nth(map.values($themes-map), 1)) !global;
  // Prefix used for CSS variables
  $prefix: $prefix !global;
}

/**
* Verifies themes and then applies them to the documentElement.
*/
@mixin apply($themes, $prefix: 'themed') {
  @include register($themes, $prefix);

  @each $theme-name, $theme-map in $themes {
    html[data-theme='#{$theme-name}'] {
      // Register the default variables for each theme
      @each $key, $val in $theme-map {
        @include make-css-variable($prefix, $key, $val);

        @content ($prefix, $key, $val, $theme-name);
      }
    }
  }
}

/*
* Returns a value from the current theme, checking for validity
* You could also just use the `var()` directly, but this function
* provides a nice way to check for validity and shows a better error message
*/
@function themed($name, $verify: true) {
  @if list.length($themes-map) == 0 {
    @error "There are no themes registered. You probably forgot to call 'register' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "'#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($theme-keys, $name) == null {
    @error "'#{$name}' is not defined in your themes.";
  }

  @return var(--#{$prefix}-#{$name});
}

/*
* Return a themes variable without any type-checking or using CSS variables,
* Useful for custom theming logic on a component level
*/
@function unthemed($name, $theme: null, $verify: true) {
  @if list.length($themes-map) == 0 {
    @error "There are no themes registered. You probably forgot to call 'register' or 'apply'";
  }

  @if meta.type-of($name) != 'string' {
    @error "'#{$name}' is not a string (should be quoted when passed into this function)";
  } @else if $verify and list.index($theme-keys, $name) == null {
    @error "'#{$name}' is not defined in your themes.";
  }

  @if $theme {
    $themes-entry: map.get($themes-map, $theme);
    @return map.get($themes-entry, $name);
  }

  $primary-theme-name: list.nth(map.keys($themes-map), 1);
  $primary-theme: map.get($themes-map, $primary-theme-name);

  @return map.get($primary-theme, $name);
}

// ------------
// Helper methods/mixins
// ------------

/**
* A function that applies the given transformer function to each value of all themes.
* This can be used to dynamically alter themes, adding more variables to them.
*/
@function modify-themes($themes, $transformers...) {
  $result-map: $themes;

  @each $theme-name, $theme-map in $themes {
    $theme-result: $theme-map;

    @each $transformer in $transformers {
      $transformer-result: $theme-result;

      @each $key, $value in $theme-map {
        $result: meta.call($transformer, $key, $value, $theme-name, $themes);
        $transformer-result: map.merge($transformer-result, $result);
      }

      $theme-result: map.merge($theme-result, $transformer-result);
    }

    $result-map: map.deep-merge($result-map, (#{$theme-name}: $theme-result));
  }

  @return $result-map;
}
